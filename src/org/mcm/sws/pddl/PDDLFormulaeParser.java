/* Generated By:JavaCC: Do not edit this line. PDDLFormulaeParser.java */
package org.mcm.sws.pddl;

import java.io.*;
import java.util.*;

import org.apache.log4j.Logger;

import org.mcm.sws.Registry;
import org.mcm.sws.util.StrUtils;

/**
 * A PDDL parser that supports namespace-prefixed predicates. Method gd()
 * allows to parse goaldescription (i.e. PDDL precondition) formulas, and the method
 * effect() allows for parsing PDDL effect formuals
 *
 * @author    Joachim Peer
 */
public class PDDLFormulaeParser implements PDDLFormulaeParserConstants {
        private static Logger log = Logger.getLogger(PDDLFormulaeParser.class);

        HashSet parsedVariables;
        HashSet parsedConstants;
        HashSet parsedPredicates;
        public Requirements parsedRequirements;
        Map namespaces;

        public PDDLFormulaeParser(Map namespaces, java.io.InputStream is, HashSet parsedVariables, HashSet parsedConstants, HashSet parsedPredicates) {
                this(is);
                this.parsedVariables = parsedVariables;
                this.parsedConstants = parsedConstants;
                this.parsedPredicates = parsedPredicates;
                this.namespaces = namespaces;
                this.parsedRequirements = new Requirements();
                this.parsedRequirements.strips = true;
        }



  public static void main(String args[]) throws ParseException {
    try {

                        if(args.length != 2) {
                                System.out.println("usage: parser [1 | 2] <file>");
                                System.exit(-1);
                        }

                  int f = Integer.parseInt(args[0]);
      FileInputStream fip = new FileInputStream(new File(args[1]));
                        PDDLFormulaeParser parser = new PDDLFormulaeParser(fip);

                        if(f==1) {
                          log.debug("Okay, parsing gd()");
                                parser.gd();
                        } else {
                                // we assume effect parsing
                                log.debug("Okay, parsing effect()");
                                parser.effect();
                        }

      System.out.println("PDDL formulae parsing terminated successfully.");
    } catch(IOException ioe) {
      ioe.printStackTrace();
    }
  }

  final public Formula gd() throws ParseException {
 Formula f; Literal lit;
    if (jj_2_3(6)) {
      lit = literal();
                 {if (true) return lit;}
    } else if (jj_2_4(6)) {
      jj_consume_token(ACHIEVE);
      lit = literal();
                              lit.setGoalAnnotation(Literal.ACHIEVE); {if (true) return lit;}
    } else if (jj_2_5(6)) {
      jj_consume_token(FINDOUT);
      lit = literal();
                              lit.setGoalAnnotation(Literal.FINDOUT); {if (true) return lit;}
    } else if (jj_2_6(6)) {
      jj_consume_token(77);
      jj_consume_token(AND);
               Conjunction conj=new Conjunction();
      label_1:
      while (true) {
        f = gd();
                                                              conj.addConjunct(f);
        if (jj_2_1(6)) {
          ;
        } else {
          break label_1;
        }
      }
      jj_consume_token(78);
                                                                                            {if (true) return conj;}
    } else if (jj_2_7(6)) {
      jj_consume_token(77);
      jj_consume_token(OR);
                    Disjunction disj=new Disjunction(); parsedRequirements.disjunctivePreconditions=true;
      label_2:
      while (true) {
        if (jj_2_2(6)) {
          ;
        } else {
          break label_2;
        }
        f = gd();
                                                                                                                    disj.addDisjunct(f);
      }
      jj_consume_token(78);
                                                                                                                                                  {if (true) return disj;}
    } else if (jj_2_8(6)) {
      jj_consume_token(77);
      jj_consume_token(NOT);
                     parsedRequirements.negativePreconditions=true;
      f = gd();
      jj_consume_token(78);
                                                                                 {if (true) return f.negate();}
    } else if (jj_2_9(6)) {
      jj_consume_token(77);
      jj_consume_token(IMPLY);
                       Implication impl = new Implication(); Formula ante, cons;
      ante = gd();
      cons = gd();
                                                                                                        impl.setAntecedent(ante); impl.setConsequence(cons);
      jj_consume_token(78);
                                                                                                                                                                   {if (true) return impl;}
    } else if (jj_2_10(6)) {
      jj_consume_token(77);
      jj_consume_token(EXISTS);
                        parsedRequirements.existentialPreconditions=true; ExistsFormula exists = new ExistsFormula(); List l;
      jj_consume_token(77);
      l = typed_list();
                                                                                                                                                    exists.setParameters(l);
      jj_consume_token(78);
      f = gd();
                                                                                                                                                                                          exists.setBody(f);
      jj_consume_token(78);
                                                                                                                                                                                                                   {if (true) return exists;}
    } else if (jj_2_11(6)) {
      jj_consume_token(77);
      jj_consume_token(FORALL);
                        parsedRequirements.universalPreconditions=true; ForallFormula forall = new ForallFormula(); List l;
      jj_consume_token(77);
      l = typed_list();
                                                                                                                                                  forall.setParameters(l);
      jj_consume_token(78);
      f = gd();
                                                                                                                                                                                        forall.setBody(f);
      jj_consume_token(78);
                                                                                                                                                                                                                 {if (true) return forall;}
    } else if (jj_2_12(6)) {
      f = fcomp();
                     {if (true) return f;}
 {if (true) return null;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Formula effect() throws ParseException {
 Formula f; Formula f2; Function func; NumericFormula ne; int n;
    if (jj_2_14(6)) {
      f = literal();
               {if (true) return f;}
    } else if (jj_2_15(6)) {
      jj_consume_token(77);
      jj_consume_token(AND);
                     Conjunction conj = new Conjunction();
      label_3:
      while (true) {
        f = effect();
                                                                         conj.addConjunct(f);
        if (jj_2_13(6)) {
          ;
        } else {
          break label_3;
        }
      }
      jj_consume_token(78);
                                                                                                       {if (true) return conj;}
    } else if (jj_2_16(6)) {
      jj_consume_token(77);
      jj_consume_token(FORALL);
                        ForallFormula forall = new ForallFormula(); List l;
      jj_consume_token(77);
      l = typed_list();
                                                                                                 forall.setParameters(l);
      jj_consume_token(78);
      f = effect();
                                                                                                                                           forall.setBody(f);
      jj_consume_token(78);
                                                                                                                                                                    {if (true) return forall;}
    } else if (jj_2_17(6)) {
      jj_consume_token(77);
      jj_consume_token(WHEN);
                      WhenFormula wf = new WhenFormula();
      f = gd();
      f2 = effect();
      jj_consume_token(78);
                                                                                     wf.setCondition(f); wf.setConsequence(f2); {if (true) return wf;}
    } else if (jj_2_18(6)) {
      jj_consume_token(77);
      n = assignOp();
      func = fHead();
      ne = fexp();
      jj_consume_token(78);
                                                       NumericAssignment na=new NumericAssignment(); na.setAssignmentType(n); na.setLeft(func); na.setRight(ne); {if (true) return na;}
 {if (true) return null;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Literal literal() throws ParseException {
 Literal l;
    if (jj_2_19(6)) {
      l = atom();
                    {if (true) return l;}
    } else if (jj_2_20(6)) {
      l = negAtom();
                       {if (true) return l;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Atom atom() throws ParseException {
 Atom atom = new Atom(); Name propertyName;
                String predName;
                Term t;
    jj_consume_token(77);
    predName = predicateName();
          predName = StrUtils.expandNS(predName, namespaces);
                System.out.println("PDDL PARSER: predName="+predName);
                Predicate p = (Predicate) Registry.getInstance().getObject(Registry.RELATION_DEF, predName);
                if(p == null) {
                  {if (true) throw new ParseException("Error: atom/predName "+predName+" not found");}
                }
                atom.setPredicate(p);
    label_4:
    while (true) {
      if (jj_2_21(6)) {
        ;
      } else {
        break label_4;
      }
      propertyName = name();
      jj_consume_token(EQ);
      t = term();
                  if(!p.hasProperty(propertyName.getString()))
                                {if (true) throw new ParseException("ERROR: property "+propertyName.getString()+" not defined for "+predName);}
                  atom.addTerm(propertyName.getString(), t);
    }
    jj_consume_token(78);
          parsedPredicates.add(p); {if (true) return atom;}
    throw new Error("Missing return statement in function");
  }

  final public NegAtom negAtom() throws ParseException {
 NegAtom atom = new NegAtom(); Name propertyName;
                String predName;
                Term t;
    jj_consume_token(77);
    jj_consume_token(NOT);
    jj_consume_token(77);
    predName = predicateName();
          predName = StrUtils.expandNS(predName, namespaces);
                Predicate p = (Predicate) Registry.getInstance().getObject(Registry.RELATION_DEF, predName);
                if(p == null) {
                  {if (true) throw new ParseException("Error: atom/predName "+predName+" not found");}
                }

                atom.setPredicate(p);
    label_5:
    while (true) {
      if (jj_2_22(6)) {
        ;
      } else {
        break label_5;
      }
      propertyName = name();
      t = term();
                  if(!p.hasProperty(propertyName.getString()))
                                {if (true) throw new ParseException("ERROR: property "+propertyName.getString()+" not defined for "+predName);}
                  atom.addTerm(propertyName.getString(), t);
    }
    jj_consume_token(78);
          parsedPredicates.add(p); {if (true) return atom;}
    throw new Error("Missing return statement in function");
  }

  final public String predicateName() throws ParseException {
 Name result;
    result = name();
                       {if (true) return result.getString();}
    throw new Error("Missing return statement in function");
  }

  final public List typed_list() throws ParseException {
 ArrayList l = new ArrayList();
    label_6:
    while (true) {
          Term t;
      t = term();
      if (jj_2_24(6)) {
                              parsedRequirements.typing=true;
        jj_consume_token(SUB);
        label_7:
        while (true) {
          type();
          if (jj_2_23(6)) {
            ;
          } else {
            break label_7;
          }
        }
      } else {
        ;
      }
                                                                                   l.add(t);
      if (jj_2_25(6)) {
        ;
      } else {
        break label_6;
      }
    }
                                                                                                  {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public void type() throws ParseException {
    if (jj_2_27(6)) {
      name();
    } else if (jj_2_28(6)) {
      jj_consume_token(77);
      jj_consume_token(EITHER);
      label_8:
      while (true) {
        type();
        if (jj_2_26(6)) {
          ;
        } else {
          break label_8;
        }
      }
      jj_consume_token(78);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Term term() throws ParseException {
 Term result;
    if (jj_2_29(6)) {
      result = name();
        parsedConstants.add((Name) result);
        {if (true) return result;}
    } else if (jj_2_30(6)) {
      result = variable();
                             {if (true) return result;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Name name() throws ParseException {
 Name name = new Name(); Token t;
    if (jj_2_31(6)) {
      t = jj_consume_token(NAME);
         name.setString(t.image);  {if (true) return name;}
    } else if (jj_2_32(6)) {
      t = jj_consume_token(NUMBER);
         name.setString(t.image);  {if (true) return name;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Variable variable() throws ParseException {
 Variable variable = new Variable();
         Token t;
    t = jj_consume_token(VARIABLE);
         variable.setString(t.image); parsedVariables.add(t.image); {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

  final public NumericComparison fcomp() throws ParseException {
 int comp; NumericFormula neLeft, neRight;
    jj_consume_token(77);
    comp = binaryComp();
    neLeft = fexp();
    neRight = fexp();
    jj_consume_token(78);
          NumericComparison nc = new NumericComparison();
          nc.setComparisonType(comp);
          nc.setLeft(neLeft);
          nc.setRight(neRight);
          {if (true) return nc;}
    throw new Error("Missing return statement in function");
  }

  final public NumericFormula fexp() throws ParseException {
  Token t; int op; NumericFormula right, left, r; Function f;
    if (jj_2_33(6)) {
      t = jj_consume_token(NUMBER);
                       NumericValue nv= new NumericValue(); nv.setValue(t.image); {if (true) return nv;}
    } else if (jj_2_34(6)) {
      jj_consume_token(77);
      op = binaryOp();
      left = fexp();
      right = fexp();
      jj_consume_token(78);
                                                          NumericOperation numOp = new NumericOperation(); numOp.setOperationType(op); numOp.setLeft(left); numOp.setRight(right); {if (true) return numOp;}
    } else if (jj_2_35(6)) {
      jj_consume_token(77);
      jj_consume_token(SUB);
      r = fexp();
      jj_consume_token(78);
                                   r.setNegated(true); {if (true) return r;}
    } else if (jj_2_36(6)) {
      f = fHead();
                      {if (true) return f;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Function fHead() throws ParseException {
  Function f= new Function(); Token t; Term term;
    if (jj_2_38(6)) {
      t = jj_consume_token(NAME);
          String funcName = StrUtils.expandNS(t.image, namespaces);
                FunctionDefinition fdef = (FunctionDefinition) Registry.getInstance().getObject(Registry.RELATION_DEF, funcName);
                f.setDefinition(fdef);
                {if (true) return f;}
    } else if (jj_2_39(6)) {
      jj_consume_token(77);
      t = jj_consume_token(NAME);
          String funcName = StrUtils.expandNS(t.image, namespaces);
                FunctionDefinition fdef = (FunctionDefinition) Registry.getInstance().getObject(Registry.RELATION_DEF, funcName);
                f.setDefinition(fdef);
      label_9:
      while (true) {
        if (jj_2_37(6)) {
          ;
        } else {
          break label_9;
        }
        term = term();
                        f.addTerm("dummy", term);
      }
      jj_consume_token(78);
          {if (true) return f;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int binaryComp() throws ParseException {
    if (jj_2_40(6)) {
      jj_consume_token(EQ);
                  {if (true) return Comparison.EQUAL;}
    } else if (jj_2_41(6)) {
      jj_consume_token(LE);
                  {if (true) return Comparison.LESS_EQ;}
    } else if (jj_2_42(6)) {
      jj_consume_token(GE);
                  {if (true) return Comparison.GREATER_EQ;}
    } else if (jj_2_43(6)) {
      jj_consume_token(G);
                  {if (true) return Comparison.GREATER;}
    } else if (jj_2_44(6)) {
      jj_consume_token(L);
                  {if (true) return Comparison.LESS;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int binaryOp() throws ParseException {
    if (jj_2_45(6)) {
      jj_consume_token(ADD);
                  {if (true) return NumericOperation.ADD;}
    } else if (jj_2_46(6)) {
      jj_consume_token(SUB);
                  {if (true) return NumericOperation.SUB;}
    } else if (jj_2_47(6)) {
      jj_consume_token(MUL);
                  {if (true) return NumericOperation.MUL;}
    } else if (jj_2_48(6)) {
      jj_consume_token(DIV);
                  {if (true) return NumericOperation.DIV;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int assignOp() throws ParseException {
    if (jj_2_49(6)) {
      jj_consume_token(ASSIGN);
                          {if (true) return NumericAssignment.ASSIGN;}
    } else if (jj_2_50(6)) {
      jj_consume_token(INCREASE);
                          {if (true) return NumericAssignment.INCREASE;}
    } else if (jj_2_51(6)) {
      jj_consume_token(DECREASE);
                          {if (true) return NumericAssignment.DECREASE;}
    } else if (jj_2_52(6)) {
      jj_consume_token(SCALE_UP);
                          {if (true) return NumericAssignment.SCALE_UP;}
    } else if (jj_2_53(6)) {
      jj_consume_token(SCALE_DOWN);
                          {if (true) return NumericAssignment.SCALE_DOWN;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(77)) return true;
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_scan_token(SCALE_DOWN)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(SUB)) return true;
    Token xsp;
    if (jj_3_23()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_scan_token(SCALE_UP)) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_scan_token(DECREASE)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_scan_token(INCREASE)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_10()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(FORALL)) return true;
    if (jj_scan_token(77)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(78)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(AND)) return true;
    Token xsp;
    if (jj_3_13()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(EITHER)) return true;
    Token xsp;
    if (jj_3_26()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(FORALL)) return true;
    if (jj_scan_token(77)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(78)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(EXISTS)) return true;
    if (jj_scan_token(77)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(78)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(IMPLY)) return true;
    if (jj_3R_10()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(OR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(L)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_12() {
    Token xsp;
    if (jj_3_25()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_scan_token(G)) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(AND)) return true;
    Token xsp;
    if (jj_3_1()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(FINDOUT)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(ACHIEVE)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_37()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  public PDDLFormulaeParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[53];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PDDLFormulaeParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PDDLFormulaeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PDDLFormulaeParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PDDLFormulaeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PDDLFormulaeParser(PDDLFormulaeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PDDLFormulaeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[79];
    for (int i = 0; i < 79; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 79; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 53; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
