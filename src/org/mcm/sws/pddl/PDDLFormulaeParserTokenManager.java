/* Generated By:JavaCC: Do not edit this line. PDDLFormulaeParserTokenManager.java */
package org.mcm.sws.pddl;
import java.io.*;
import java.util.*;
import org.apache.log4j.Logger;
import org.mcm.sws.Registry;
import org.mcm.sws.util.StrUtils;

public class PDDLFormulaeParserTokenManager implements PDDLFormulaeParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x2L) != 0L)
            return 9;
         if ((active0 & 0xffffff0000000780L) != 0L)
         {
            jjmatchedKind = 64;
            return 14;
         }
         return -1;
      case 1:
         if ((active0 & 0x2200000000000L) != 0L)
            return 14;
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
            return 10;
         }
         if ((active0 & 0xfffddf0000000780L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
            return 14;
         }
         return -1;
      case 2:
         if ((active0 & 0xffcdc70000000780L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
            return 14;
         }
         if ((active0 & 0x30180000000000L) != 0L)
            return 14;
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 2;
            return 10;
         }
         return -1;
      case 3:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
            return 10;
         }
         if ((active0 & 0x4040000000000L) != 0L)
            return 14;
         if ((active0 & 0xffc9c30000000780L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
            return 14;
         }
         return -1;
      case 4:
         if ((active0 & 0x8400000000000L) != 0L)
            return 14;
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
            return 10;
         }
         if ((active0 & 0xffc1830000000780L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 4;
            return 14;
         }
         return -1;
      case 5:
         if ((active0 & 0xf7c0000000000600L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 5;
            return 14;
         }
         if ((active0 & 0x801830000000180L) != 0L)
            return 14;
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 5;
            return 10;
         }
         return -1;
      case 6:
         if ((active0 & 0x600000000000200L) != 0L)
            return 14;
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 6;
            return 10;
         }
         if ((active0 & 0xf1c0000000000400L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
            return 14;
         }
         return -1;
      case 7:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 7;
            return 10;
         }
         if ((active0 & 0x70c0000000000000L) != 0L)
            return 14;
         if ((active0 & 0x8100000000000400L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 7;
            return 14;
         }
         return -1;
      case 8:
         if ((active1 & 0x2L) != 0L)
            return 10;
         if ((active0 & 0x8100000000000400L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 64;
               jjmatchedPos = 8;
            }
            return 14;
         }
         return -1;
      case 9:
         if ((active0 & 0x8100000000000000L) != 0L)
            return 14;
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 64;
               jjmatchedPos = 9;
            }
            return 14;
         }
         return -1;
      case 10:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 10;
            return 14;
         }
         return -1;
      case 11:
         if ((active0 & 0x400L) != 0L)
            return 14;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 77);
      case 41:
         return jjStopAtPos(0, 78);
      case 42:
         return jjStopAtPos(0, 75);
      case 43:
         return jjStopAtPos(0, 72);
      case 45:
         return jjStopAtPos(0, 73);
      case 47:
         return jjStopAtPos(0, 74);
      case 58:
         return jjMoveStringLiteralDfa1_0(0xfffffff800L, 0x0L);
      case 60:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 61:
         return jjStopAtPos(0, 71);
      case 62:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 63:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xa22100000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000000000000180L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10820000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x401000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000400000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0xc0000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4210000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc008000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000010200000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0xc200000205080000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x8a0c04000L, active1, 0x2L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000400018480L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x440022000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x408000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1010100000002000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x101081000000100L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x148000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 14);
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000800L, active1, 0L);
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 49, 14);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000002001000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xc008000040000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000010000000L, active1, 0L);
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 14);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 14);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4048000002000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000080L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000004000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 14);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x440002000020000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4a05080200L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x8400L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000108000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 14);
         return jjMoveStringLiteralDfa3_0(active0, 0x100020000000800L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0c40000L, active1, 0x2L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000010000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x2001000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x101004000040100L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x10108000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0xac0002000030080L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(3, 21);
         return jjMoveStringLiteralDfa4_0(active0, 0xc000400000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 14);
         return jjMoveStringLiteralDfa4_0(active0, 0x205080000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x2001000L, active1, 0L);
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 14);
         return jjMoveStringLiteralDfa4_0(active0, 0x30080000e0c00800L, active1, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000004000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x8010000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x108400L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8e0c0a000L, active1, 0x2L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10100000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x208080000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0xf200021402100000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10001d00L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0L);
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 38);
         return jjMoveStringLiteralDfa5_0(active0, 0x101000000000200L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x40080L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x4010000L, active1, 0L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 37);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 14);
         return jjMoveStringLiteralDfa5_0(active0, 0x800001000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0L);
      case 121:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0xc100000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1400000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 14);
         return jjMoveStringLiteralDfa6_0(active0, 0x20200L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0008a09080000L, active1, 0L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 14);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0L);
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 14);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 14);
         return jjMoveStringLiteralDfa6_0(active0, 0x101000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x110000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active1, 0L);
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 14);
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 25);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 14);
         break;
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 14);
         return jjMoveStringLiteralDfa6_0(active0, 0xa4c52000L, active1, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000004000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0L);
      case 99:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 39);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 14);
         return jjMoveStringLiteralDfa7_0(active0, 0x40010400L, active1, 0L);
      case 103:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(6, 12);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0xa0c4a000L, active1, 0x2L);
      case 109:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 14);
         break;
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(6, 28);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(6, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0x101004000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(6, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0x3000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(6, 34);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 14);
         return jjMoveStringLiteralDfa7_0(active0, 0x100001200180000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 14);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 14);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 14);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 14);
         break;
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000200080000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4010000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000080800000L, active1, 0x2L);
      case 112:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 14);
         break;
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(7, 20);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(7, 36);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x40008000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x20402000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x60402400L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x100040000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 65, 10);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x201080000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0xc014000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(8, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x20c02000L);
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 56, 14);
         return jjMoveStringLiteralDfa10_0(active0, 0x8040000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x14000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 63, 14);
         return jjMoveStringLiteralDfa10_0(active0, 0x80400L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(9, 26);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x20490000L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x100800000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(10, 27);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(10, 30);
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x1040000L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x20400000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x90000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(11, 10, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0x94000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x1802000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(12, 32);
         break;
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x20400000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0xa0000L);
      case 102:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x20400000L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x14000L);
      case 113:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000L);
      case 102:
         return jjMoveStringLiteralDfa15_0(active0, 0x1080000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x20402000L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x14000L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x1014000L);
      case 102:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active0, 0x402000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x1014000L);
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(16, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000L);
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x802000L);
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x14000L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa19_0(active0, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x14000L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(18, 24);
         break;
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x882000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa20_0(active0, 0x14000L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x842000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(19, 19);
         break;
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x34000L);
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x40000L);
      case 110:
         return jjMoveStringLiteralDfa22_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0x20000L);
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(21, 23);
         break;
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0x14000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private final int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0x14000L);
      case 110:
         return jjMoveStringLiteralDfa23_0(active0, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0x40000L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(22, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
private final int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa24_0(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0x14000L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(23, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
private final int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa25_0(active0, 0x14000L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(24, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
private final int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(25, 14);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(25, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(13);
                  }
                  if ((0x7ffe00800000000L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(12);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  else if (curChar == 59)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar != 46)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x7ffe00800000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x7ffe00800000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if ((0x7ffe00800000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(13);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(12);
                  }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 1:
                  jjAddStates(0, 2);
                  break;
               case 9:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(10);
                  break;
               case 12:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\144\145\146\151\156\145", 
"\144\157\155\141\151\156", "\160\162\157\142\154\145\155", 
"\162\145\161\165\151\162\145\155\145\156\164\163", "\72\163\164\162\151\160\163", "\72\164\171\160\151\156\147", 
"\72\156\145\147\141\164\151\166\145\55\160\162\145\143\157\156\144\151\164\151\157\156\163", 
"\72\144\151\163\152\165\156\143\164\151\166\145\55\160\162\145\143\157\156\144\151\164\151\157\156\163", "\72\145\161\165\141\154\151\164\171", 
"\72\145\170\151\163\164\145\156\164\151\141\154\55\160\162\145\143\157\156\144\151\164\151\157\156\163", 
"\72\165\156\151\166\145\162\163\141\154\55\160\162\145\143\157\156\144\151\164\151\157\156\163", 
"\72\161\165\141\156\164\151\146\151\145\144\55\160\162\145\143\157\156\144\151\164\151\157\156\163", 
"\72\143\157\156\144\151\164\151\157\156\141\154\55\145\146\146\145\143\164\163", "\72\146\154\165\145\156\164\163", "\72\141\144\154", 
"\72\144\165\162\141\164\151\166\145\55\141\143\164\151\157\156\163", 
"\72\144\165\162\141\164\151\157\156\55\151\156\145\161\165\141\154\151\164\151\145\163", "\72\143\157\156\164\151\156\165\157\165\163\55\145\146\146\145\143\164\163", 
"\72\164\171\160\145\163", "\72\143\157\156\163\164\141\156\164\163", 
"\72\160\162\145\144\151\143\141\164\145\163", "\72\141\143\164\151\157\156", 
"\72\144\165\162\141\164\151\166\145\55\141\143\164\151\157\156", "\72\160\141\162\141\155\145\164\145\162\163", 
"\72\144\165\162\141\164\151\157\156", "\72\160\162\145\143\157\156\144\151\164\151\157\156", 
"\72\143\157\156\144\151\164\151\157\156", "\72\145\146\146\145\143\164", "\72\144\157\155\141\151\156", 
"\72\157\142\152\145\143\164\163", "\72\151\156\151\164", "\72\147\157\141\154", "\72\155\145\164\162\151\143", 
"\157\142\152\145\143\164", "\145\151\164\150\145\162", "\167\150\145\156", "\156\157\164", 
"\141\156\144", "\157\162", "\151\155\160\154\171", "\145\170\151\163\164\163", 
"\146\157\162\141\154\154", "\141\164", "\157\166\145\162", "\163\164\141\162\164", "\145\156\144", 
"\141\154\154", "\155\151\156\151\155\151\172\145", "\155\141\170\151\155\151\172\145", 
"\164\157\164\141\154\55\164\151\155\145", "\141\143\150\151\145\166\145", "\146\151\156\144\157\165\164", 
"\141\163\163\151\147\156", "\151\156\143\162\145\141\163\145", "\144\145\143\162\145\141\163\145", 
"\163\143\141\154\145\55\165\160", "\163\143\141\154\145\55\144\157\167\156", null, 
"\77\144\165\162\141\164\151\157\156", null, "\74\75", "\76\75", "\74", "\76", "\75", "\53", "\55", "\57", "\52", 
null, "\50", "\51", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x7fffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[14];
private final int[] jjstateSet = new int[28];
protected char curChar;
public PDDLFormulaeParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public PDDLFormulaeParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 14; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
